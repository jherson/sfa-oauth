Salesforce OAuth2 client for Openshift but can also be used for any JBoss EAP 6.x deployment.

usage:

1) Setup up Salesforce Connected app Setup -> Create -> Apps - Connected App 

fill out required information and 
1a. generate consumer key and consumer secret
1b. set the Callback URL to https://<your hostname>:<your port>/authenticate

for more information on creating a connected app: http://help.salesforce.com/apex/HTViewHelpDoc?id=connected_app_create.htm&language=en_US

2) add maven dependency to your pom.xml:

<dependency>
  <groupId>com.nowellpoint</groupId>
  <artifactId>nowellpoint-oauth-api</artifactId>
  <version>1.0</version>
</dependency>


3) add producer to your project:


public class Resources {

    ** Note: client id, client secret and callback url values are populated from step 1

    @Produces
	@Salesforce
	@ApplicationScoped
	public OAuthServiceProvider produceOAuthServiceProvider() {
		return new OAuthConfig().setClientId(<client id>)
		        .setClientSecret(<client secret>)
		        .setCallbackUrl(<callback URL>)
		        .setDisplay("popup")
		        .setPrompt("login")
		        .setScope("api refresh_token web")
		        .setUseSandbox(Boolean.FALSE)
		        .setLogoutRedirect("/")
		        .build();
	}
}

4) handle the authentication callback

    public class MyOAuthVerificationEvent extends OAuthVerificationEvent {

        @Override
	    public void onVerify(OAuthSessionContext context) {
	    
	        // do work with context if needed
	        
	        // OAuthSessionContext contains 
	        // 	1. HttpServletRequest
	        //	2. HttpServletResponse
	        //	3. OAuthSession        
	        
	        OAuthSession oauthSession = context.getOauthSession();
	        
	        // OAuthSession provides the following Salesforce information
	        //	1. Identity
	        //	2. Token
	        //	3. UserInfo
	        //	4. OrganizationInfo
	        
	        try {
	            context.getResponse().sendRedirect(context.getRequest().getContextPath() + redirectUrl);
		    } catch (IOException e) {
			    e.printStackTrace();
		    }   
        }
    }

5) add page with a login and logout link or button

    <h:commandLink value="#{msgs.login}" onclick="window.location.href='login';return false;" />
							
    <h:commandLink value="#{msgs.logout}" onclick="window.location.href='/logout';return false;" />
    
or include in a jsf action:

    .xhtml

    <h:commandLink value="#{msgs.login}" action="#{session.login()}" />
    
    <h:commandLink value="#{msgs.logout}" action="#{session.logout()}" />
    
    Bean

    public class SessionBean {
        
        public void login() {
            try {
		        FacesContext.getCurrentInstance().getExternalContext().redirect("/login");
	        } catch (IOException e) {
		        throw new FacesException("Cannot redirect to " + path + " due to IOException.", e);
	        } 
        }
        
        public void logout() {
            try {
		        FacesContext.getCurrentInstance().getExternalContext().redirect("/logout");
	        } catch (IOException e) {
		        throw new FacesException("Cannot redirect to " + path + " due to IOException.", e);
	        } 
        }
    
    }
    
